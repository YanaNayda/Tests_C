/////////////////////////////////////////////////////////////Ex1
#include<stdio.h>
int findNum(int num);  // Declare the function

 
void main() {
	int num = 20;
	int missing = findNum(num);
	printf("%d\n", missing);
}


int findNum(int num) {
	int answer = 0;
	if (num <= 10) {
		return 1;
	}
	int num1 = num % 10;
	int num2 = num /10%10 ;
	 
	if (!((num1%2==0 && num2%2==1)||(num2 % 2 == 0 && num1 % 2 == 1))) {
		return 0;
	}
	

	return findNum(num/10);
}
/////////////////////////////////////////////////////////////////////Ex2

#include<stdio.h>
#include<string.h>
#define N 4
int  checkKey(int[][N],int,int);


int main() {
	int key = 3;
	int matr[N][N] = { {6 ,12, 8, 3},{7, 4, 45, 20},{8, 90, 3, 9},{14, 67, 2, 1} };
	int mnumber = checkKey(matr,N,N,key);
	printf("%d", mnumber);
}

int checkKey(int matrice[][N], int row, int col, int key) {
	if (matrice[row-1][col-1] > key) {
		return -1;
	}
	if (row == 0 && col == 0 && matrice[row-1][col-1] != key) {
		return -1; 
	}
	if (matrice[row-1][col-1] == key) {
		return row-1;
	}
	return checkKey(matrice,row-1,col-1,key);
}
 
/////////////////////////////////////////////////////////////////////////////Ex3
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>

#define N 4
int Key(int* arr, int n, int key);
void swap(int* a, int* b);
 
int main() {
	int n = 9; 
	int key = 8; 
	int arr[] = { 7, 9, 14, 35, 2, 3, 6, 10, 55 };
	int* answer = Key( arr,n,key );
	
}
void swap(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}


int Key(int* arr, int n, int p) {
	int left = 0, right = n - 1;

	while (left < right) {
		while (left < right && arr[right] >= p){
			right--;
		}
		while (left < right && (arr[left] < p)) {
			left++;
		}
		if (left < right) {
			swap(arr + left, arr + right);
		}

	}
	if (arr[n - 1] >= p)
		return arr + left;
	return NULL;
	
}
////////////////////////////////////////////////////////////////////EX5
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>

#define N 4
double Key(double x, double n);
 
int main() {
	int x = 3; 
	int n = 1; 
	double answer = Key(x,n);
	printf("%d",answer);
}


double Key(double x , double n ) {
	double sum = 3*x;
	double temp = x; 
	int i; 
	for (i = 1; i <= n; i++) {
		temp *= x /(2*i*(2*i+1));
		sum += (2 * i + 3)*temp;
	}
	return sum;
}
