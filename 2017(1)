///////////////////////////////////////////////////////////////////EX1
#include<stdio.h>

int findNum(int num, int big);  // Declare the function

int main() {
	int num = 977977;
	int big = 7;
	int missing = findNum(num, big);
	printf("%d\n", missing);
}

int findNum(int num, int big) {
	int sum = 1;
	int n = num % 10;
	
	if (num < 10) {
		return 0;
	}

	if (n == big) {
		sum = 1;
	}
	else
		sum = 0;

	sum = sum+ findNum(num / 10, big);  // Corrected line

	if (sum % 2 == 0) {
		return 1;
	}
	return 0;  // Added return statement
}
/////////////////////////////////////////////////////////////////Ex2
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>

#define N 4
int missing_num(int* arr, int n);
 
int main() {
	
	int n = 7; 
	int arr[] = {7,4,5,6,1,4,0};
	int answer = missing_num(arr,n);
	printf("%d",answer);
}


int missing_num(int* arr,int  n ) {
	int* temparr = (int*)calloc(n+1,sizeof(int));
	assert(temparr);
	int i; 
	int temp=1 ;
	for (i = 0; i < n; i++) {
		temparr[arr[i]]++;
	}

	for (i = 0; i < n; i++) {
		if (temparr[i] == 0) {
			temp = i;
		}

	}
	free(temparr);
	return temp; 
}
//////////////////////////////////////////////////////////////////EX3
#include<stdio.h>
#include<string.h>
//void newNum(int n); // Declare the function
int withoutSpace(char );

int main() {
	char* s1;
	char s[100] = "I        live in Israel";
	s1 = withoutSpace(s);
	printf("The new string is: %s \n", s1);
	free(s1);

}

int withoutSpace(char* s){
	char* arr, i, j=0;
	char* newarr;
	arr = (char*)calloc(strlen(s) + 1, sizeof(char));
	for (i = 0; s[i]!='\0'; i++) {
		if (s[i]!=' ') {
			arr[j] = s[i];
			j++;
		}
	}
	newarr = (char*)realloc(arr, (j + 1) * (sizeof(char)));
	return newarr;
	
}
/////////////////////////////////////////////////////////////////////Ex5
#include<stdio.h>
#include<string.h>
#define N 4
#define R 3
#define C 5
int copySumMatrix (int[][C], int[][C]);


int main() {
	int key = 3;
	int matriceA[R][C] = { {1 ,1, 2 ,- 5, - 2},{2, - 2, - 1, 0, 4},{4, 4, 2, 8, 1}};
	int matriceB[R][C] = {{0},{0},{0}};
	copySumMatrix(matriceA,matriceB);
	//printf("%d", mnumber);
}

int copySumMatrix(int matriceA[][C],int matriceB[][C]) {
	int i,j;
	int sum;
	int sumA;
	for (i = 0; i < R; i++) {

		sum = 0;
		sumA = 0;

		for (j = 0; j < C; j++) {
			if (i == 0) {
				sum += matriceA[i][j];
				matriceB[i][j] = sum;
			}
			else {
				sumA += matriceA[i][j];
				if (j != 0) {
					matriceB[i][j] = sumA+ matriceB[i-1][j];
				}
				else
				    matriceB[i][j] = matriceB[i - 1][j] + matriceA[i][j];
			}
		}
	}
	return 1;
}
