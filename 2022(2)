//////////////////////////////////////////////////Ex1(1)
#include<stdio.h>
#include<string.h>

#define N 4
void mergeSort(int* a, int first, int last);
int sumLac(int [][N]);


int main() {
	int matrice[N][N] = { {10,2,7,1},{2,7,-1,6},{1,-2,-6,-5},{-2,4,7,9} };
	int answer = sumLac(matrice);
	printf("%d", answer);
}

int sumLac(int mat[][N]) {
	int row, col; 
	int sum = 0;
	int l; 
	for (row = 0; row < N; row++) {
		sum = 0;
		for (col = 0; col < N; col++) {
			if (row != col) {
				sum += mat[row][col];
			}
			else
				l = mat[row][col];
		}
		if (sum != l) {
			return 0; 
		}
	}
	return 1;
}
///////////////////////////////////////////////////Ex1(2)
#include<stdio.h>
#include<string.h>

#define N 4
void mergeSort(int* a, int first, int last);
int sumLac(int [][N]);


int main() {
	int matrice[N][N] = { {10,2,7,-1},{2,7,-20,4},{9,-2,-6,6},{-1,7,7,9} };
	int answer = sumLac(matrice);
	printf("%d", answer);
}

int sumLac(int mat[][N]) {
	int row, col; 
	int sum = 0;
	int l; 
	for (row = 0; row < N; row++) {
		sum = 0;
		for (col = 0; col < N; col++) {
			if (row != col) {
				sum += mat[col][row];
			}
			else
				l = mat[col][row];
		}
		if (sum != l) {
			return 0; 
		}
	}
	return 1;
}


//////////////////////////////////////////////////EX2
#include<stdio.h>
//void newNum(int n); // Declare the function
int MaxRelative(int*, int,int,int );

int main() {
	int num1 = 23;
	int i = 0;
	int j = 4;
	int arr1[] = { -5,-2,12,25,34,40 };
	int t = MaxRelative(arr1, num1,i ,j );
	printf("%d", t);
}

int MaxRelative(int* c, int k, int i, int j) {
	//int sum; 
	if (i == j) {
		return -1;
	}
	if (c[i] + c[j] == k) {
		return i;
	}
	if (c[i] + c[j] > k) {
		return MaxRelative(c, k, i, j - 1);
	}
	 return MaxRelative(c, k, i+1, j);

}
/////////////////////////////////////////////////////////////EX3
#include<stdio.h>
#include<string.h>
int  removeDuplicates(char);


int main() {
	int number; 
	char str[] = "abcd";
	 number = removeDuplicates(str);
	 printf("%d", number);
}

int  removeDuplicates(char* str) { 
	int counter[26] = {0};
	int len = strlen(str);
	int i = 0; 
	int count=len;
	for (i = 0; i<len; i++) {
		
		if (counter[(str[i]) - 'a'] == 0) {
			counter[(str[i]) - 'a']++;
			
			
		}
		else
			return 0;
	}
	for (i = 0; i < 26, count >0 ; i++) {
		if (counter[i] == 1) {
			count--;
			if (counter[i] != counter[i + 1] && count!=0) {
				return 0;
			}
		}

	}
	return 1; 
}
