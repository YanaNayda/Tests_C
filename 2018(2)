#include<stdio.h>

int is_even (int num);  // Declare the function

 
void main() {
	int num = 54321;
	int missing = is_even(num);
	printf("%d\n", missing);
}


int is_even(int num) {
	int n1 = num % 10;
	int n2 = num / 10 % 10;
	int n3 = num / 100 % 10;
	int answer = 0;

	if (num < 100) {
		if (n1 < n2) {
			return -1;
		}

		return 1;
	}
	if (n1 < n2 && n2 < n3) {
		answer = -1;
	}
	else
		if (n1 > n2 && n2 > n3) {
			answer = 1;
		}
		else {
			return 0;
		}
		
	answer= answer + is_even(num/10);
	if (answer < 0) {
		return -1;
	}
	else
		return 1;
}


//////////////////////////////////////////////////////////EX4

#include<stdio.h>
#include<string.h>
int numDuplicate(char,char);

int main() {
	int number;
	char s[] = "aldd";
	char s1[] = "aba";
	number = numDuplicate (s,s1);
	printf("The number is: %d \n", number);
}

int equalChar(char *a, char *b) { 
	int i;
	for (i=0; i < strlen(b); i++) {
		if (a[i] != b[i]) {
			return 0;
		}
	}
	return 1;
}
int numDuplicate(char* s, char *s1){
	int i;
	int len = strlen(s);
	int counter = 0;
	for (i = 0; i != len; i++) {
		if (s[0] == s1[0]) {
			counter += equalChar(s, s1);
			s++;
		}
		else {
			s++;
		}
	}
	return counter;
}
/////////////////////////////////////////////////////////////////////////EX5
#include<stdio.h>
#include<string.h>

#define R 3
#define C 5
int copySumMatrix(int[][C], int[][C]);


int main() {
	int key = 3;
	int matriceA[R][C] = { {1 ,1, 2 ,-5, -2},{3, -2, -1, 0, 4},{4, 4, 2, 8, 1} };
	int matriceB[R][C] = { {0},{0},{0} };
	copySumMatrix(matriceA, matriceB);
	//printf("%d", mnumber);
}

int copySumMatrix(int matriceA[][C], int matriceB[][C]) {
	int i, j;
	int max=matriceA[0][0];
	int sum;
	int sumA;
	for (i = 0; i < R; i++) {
		for (j = 0; j < C; j++) {
			if (matriceA[i][j] > max) {
				max = matriceA[i][j];
				matriceB[i][j] = max;

			}
			else
				matriceB[i][j] = max;
		}
	}
	return 1;
}
 
