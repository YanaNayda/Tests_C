///////////////////////////////////////////////////////////////////////////////////////////////////////////EX2(don't work)
#include<stdio.h>
#include<string.h>
int CheckLang(char);
int CheckWord(char, int);


int main() {
	char str[] = "pmtwxn9mtn pbr-%$jpcuwfRjvcufgxn$pbL";
	int finalNum = CheckLang (str);
	printf("The number is: %d \n",finalNum);
}

int CheckLang(char* sentance) {
	int counter=0;
	int i; 
	int len = strlen(sentance);

	for (i = 0; i< len; i++) {
		if (sentance[i]>= 'a' && sentance[i] <= 'z') {
			counter++;
		
		}
		else
			if (CheckWord (sentance, counter)) {
				counter = 0;
			}
			else
				return 0; 
	}
	return 1;
}
int CheckWord(char* sentance, int counter) {
	int i = 0;
	int letters[26] = { 0 };
	while (i < counter) {
		int index = (sentance[i])-'a';

		letters[index]++;
		i++;
	}
	for (i = 0; i < 26; i++) {
		if (letters[i] > 1) {
			return 0; 
		}
	}
	return 1;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////EX2

#include<stdio.h>
//void newNum(int n); // Declare the function
int MaxRelative(int*, int );

int main() {
	int num1 = 15;
	int arr1[] = { 24, 28 ,22, 4 ,6, 7, 8, 6, 5, 11, 10, 21, 9, 4 ,13 };
	int t = MaxRelative(arr1, num1);
	printf("%d", t);
}

int MaxRelative(int* arr1, int num1 ) {
	

		int num, max;
		if (num1 == 3)
		{
			if (arr1[1] > arr1[0] && arr1[1] > arr1[2])
				return (arr1[1] - arr1[0] + arr1[1] - arr1[2]);
			return 0;
		}
		max = MaxRelative(arr1 + 1, num1 - 1);
		if (arr1[1] <= arr1[0] || arr1[1] <= arr1[2]) {
			return max;
		}
		num = (arr1[1] - arr1[0] + arr1[1] - arr1[2]);
		return (max > num) ? max : num;
	
}
////////////////////////////////////////////////////////////////Ex3(????)
#include<stdio.h>
#include<string.h>

#define R 4
#define C 3
#define N 4
int StrFib(char* str);
int StringToNum(char* str, int index, int n);
int numLength(int num);


int main() {
	int key = 3;
	int matriceA[N][N] = {{-7,12,1,6},{25,13,23,18},{27,26,36,91},{48,39,38,30}};
	char str[] = "19101929";
	int answer = StrFib(str);
	printf("%d", answer);
	/* copySumMatrix(matriceA);
	 for (int i = 0; i < N; i++) {
		 printf("   ");
		 for (int j = 0; j < N; j++) {
			 printf("%d ", matriceA[i][j]);
		 }
	 }*/
	//printf("%d", answer);
}

int numLength(int num)
{
	int counter = 0;
	while (num > 0)
	{
		counter++;
		num /= 10;
	}
	return counter;
}

int StrFib(char* str) {
	int i, fib1, fib2, fibN, len,numLen, fibpotential;
	fib1 = str[0]-'0';
	fib2 = str[1]-'0';
	len = strlen(str);
	for (i = 2; i < len;) {
		fibN = fib1 + fib2;
		numLen  = numLength(fibN);
		fibpotential = StringToNum(str, i, numLen);
		if (fibN != fibpotential) {
			return 0; 
		}
		fib1 = fib2;
		fib2 = fibN;
	}
	return 1; 
	
}
int StringToNum(char* str, int index, int n) {
	int i=index, num=0; 
	for (i = index; i < index + n; i++) {
		num = (num * 10) + (str[i] - '0');
	}
	return num;
}
 
