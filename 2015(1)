/////////////////////////////////////Ex1
#include<stdio.h>
//void newNum(int n); // Declare the function
int NewNumber(num);

int main() {
	int num = 879026;

	//int arr1[] = { -5,-2,12,25,34,40 };
	int t = NewNumber(num);
	printf("%d", t);
}

int NewNumber(num) {
	int newnum = num;
	if (num < 100) {
		num = 10 * (num % 10) + num / 10;
		return num;
	}

	return 100* NewNumber(num / 100) + NewNumber (num%100);

}
//////////////////////////////////////////////////EX2
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>

#define N 4
void merge_sort(int*, int, int);
int Distance(int* a, int size);
void merge(int* a,int p, int q, int r);


int main() {
	int n = 7; 
	int a[] = { 1,9,3,5,48,14,25 };
	int answer = Distance(a,n);
	printf("%d", answer);
}

void merge_sort(int* a, int first, int last)
{
	int middle;
	if (first < last)
	{
		middle = (first + last) / 2;
		merge_sort(a, first, middle);
		merge_sort(a, middle + 1, last);
		merge(a, first, middle, last);
		{
		}

	}
}

void merge(int* a, int p, int q, int r)
{
	int i = p, j = q + 1, k = 0;
	int* temp = (int*)malloc((r - p + 1) * sizeof(int));

	assert(temp);
	while ((i <= q) && (j <= r))
		if (a[i] < a[j])
			temp[k++] = a[i++];
		else
			temp[k++] = a[j++];
	while (j <= r) // if( i>q )
		temp[k++] = a[j++];
	while (i <= q) // j>r
		temp[k++] = a[i++];
	for (i = p, k = 0; i <= r; i++, k++) // copy temp[] to a[]
		a[i] = temp[k];
	free(temp);
}



int Distance(int* a, int size) {
	int dist,temp;
	int i;
	merge_sort(a,0,size-1);
	dist = a[1] - a[0];
	for (i = 1; i < size - 1; i++) {
		temp = a[i + 1] - a[i];
		if (temp < dist) {
			dist = temp;
		}
	}
	return dist; 
	
}

////////////////////////EX3
#include<stdio.h>
#include<string.h>
int checkletter(char, char);

int main() {
	char s1[30] = "bdacaabaabaab";
	char s2[30] = "abalc";
	int t = checkletter(s1,  s2);
	printf("%d", t);
}

int checkletter(char* s1, char* s2) {
	int i=0,k=0,counter=0;
	while (s2[i] != '\0') {
		for (k = 0; k < strlen(s1-1); k++) {
			if (s2[i] == s1[k]) {
				counter = counter +1;
				break;
			}
		 }
		if (counter < i + 1) {
			return 0; 
		}
		i++;
	}
	return 1;
	
}


//////////////////////////////////////EX4
#include<stdio.h>
#include<string.h>
#define N 4
int minmatrice(int[][N],int,int);


int main() {
	int matr[N][N] = { {6,12,3},{7,4,20},{8,90,9},{5,8,3}};
	int mnumber = minmatrice(matr,N,N);
	printf("%d", mnumber);
 
}

int minmatrice(int matrice[][N], int row, int col) {
	int min ; 
	int	temp;
	for (row = 1; row < N; row++) {
		for (col = 0; col < row; col++) {
			if (row == 1) {
				min = matrice[row][col];
				temp = min;
			}
			else
				temp = matrice[row][col];
			if (min > temp) {
				min = temp; 
			}
		}
	}
	return min;
}
/////////////////////////////////////////////////////////EX5
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<assert.h>

#define N 4
//void merge_sort(int*, int, int);
int S(double a, int n);
//void merge(int* a,int p, int q, int r);


int main() {
	int x = 2;
	int n = 4; 
	//int a[] = { 1,9,3,5,48,14,25 };
	int answer = S(x,n);
	printf("%d", answer);
}



int S(double x, int n) {
		double sum = x, item = x;
		int i;
		if (x == 0) return 0;
		for (i = 1; i <= n; i++)
		{
			item *= x * x / (2 * i + 1);
			sum += item;
		}
		return sum;
	
	
}
