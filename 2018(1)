# preparation
#include<stdio.h>
int findNum(int num);  // Declare the function


void main() {

	int num = 124; 
	int missing = findNum(num); 
	printf("%d\n", missing); 
}


int findNum(int num) {

	if (num < 100) {
		return 1;
	}
	int a = num / 100 % 10;
	int b = num / 10 % 10;
	int c = num % 10;

	if (!((a < b && b > c) || (a > b && b < c))) {
		return 0;
	}
	return findNum(num / 10);
}




////////////////////////////////////////////////////EX4
#include<stdio.h>
#include<string.h>
//void newNum(int n); // Declare the function
int withoutSpace(char);

int main() {
	int number;
	char s[] = "-2353";
	number = withoutSpace(s);
	printf("The new string is: %d \n", number);
}

int withoutSpace(char* s){
	int i, j=1;
	int newNum=0;
	int* arr,n;
	arr = (int*) calloc (strlen(s), sizeof(int));

	for (i = 0; s[i]!='\0'; i++) {
		if (s[0] == '-') {
			arr[0] = -1;
			arr[j] = s[j] - '0';
			j++;
			n = 1;
		}
		else {
			arr[0] = 1;
			arr[j] = s[i] - '0';
			j++;
			n = 10;
		}
	}
	for (i = 0; i< strlen(s)-2 ; i++) {
		n *= 10;
	}
	for (i = 1; i< strlen(s) ; i++) {
		newNum += arr[i] * n;
		n = n / 10;
	}
	return (newNum * arr[0]);

}
/////////////////////////////////////////Ex5
#include<stdio.h>
#include<string.h>
#define N 6
int copySumMatrix (int[][N]);


int main() {
	int key = 3;
	int matriceA[N][N] = { {-7,12,1,4,10,2},{5,3,23,-4,4,5},{1,-4,12,-2,-2,7},{-12,6,15,12,12,8},{3,7,-3,15,15,7},{8,10,4,20,20,8}};
	int row=N;
	int col=N;
	int answer= copySumMatrix(matriceA);
	printf("%d ",answer);
}

int copySumMatrix(int matrice[][N]) {
		int col, row, tempcount = 1, maxcount = 0;
		for (col = 0; col < N; col++){

			tempcount = 1;
			for (row = 0; row < N - 1; row++)
			{
				if (matrice[row][col] <= matrice[row + 1][col])
				{
					tempcount++;
					if (tempcount > maxcount)
						maxcount = tempcount;
				}
				else
					tempcount = 1;
			}
		}
		return maxcount;
	
}
 
